(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{104:function(e,n,a){"use strict";a.d(n,"a",(function(){return d})),a.d(n,"b",(function(){return u}));var t=a(0),s=a.n(t);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,s=function(e,n){if(null==e)return{};var a,t,s={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var c=s.a.createContext({}),p=function(e){var n=s.a.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},d=function(e){var n=p(e.components);return s.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},m=s.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),m=t,u=d["".concat(r,".").concat(m)]||d[m]||b[m]||i;return a?s.a.createElement(u,o(o({ref:n},c),{},{components:a})):s.a.createElement(u,o({ref:n},c))}));function u(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,r=new Array(i);r[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:t,r[1]=o;for(var c=2;c<i;c++)r[c]=a[c];return s.a.createElement.apply(null,r)}return s.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},81:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return i})),a.d(n,"metadata",(function(){return r})),a.d(n,"toc",(function(){return o})),a.d(n,"default",(function(){return c}));var t=a(3),s=(a(0),a(104));const i={id:"rolesAndPermissions",title:"Roles and Permissions"},r={unversionedId:"rolesAndPermissions",id:"rolesAndPermissions",isDocsHomePage:!1,title:"Roles and Permissions",description:"Laravel-permission (https://spatie.be/docs/laravel-permission/v3/introduction) by Spatie allows you to manage user permissions and roles in a database.",source:"@site/docs\\rolesAndPermissions.md",slug:"/rolesAndPermissions",permalink:"/tennis-court-system/rolesAndPermissions",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/rolesAndPermissions.md",version:"current",sidebar:"someSidebar",previous:{title:"GitHub deployment flow",permalink:"/tennis-court-system/github"},next:{title:"Database Design",permalink:"/tennis-court-system/databaseDesign"}},o=[{value:"Installation",id:"installation",children:[]},{value:"Setting it up",id:"setting-it-up",children:[{value:"Publish the migrations",id:"publish-the-migrations",children:[]},{value:"Create database tables",id:"create-database-tables",children:[]},{value:"Updating User Model",id:"updating-user-model",children:[]},{value:"Updating the middleware",id:"updating-the-middleware",children:[]},{value:"Create Permissions and Roles",id:"create-permissions-and-roles",children:[]},{value:"Laravel Permissions in Vue Components",id:"laravel-permissions-in-vue-components",children:[]},{value:"Additional comments",id:"additional-comments",children:[]}]},{value:"Basic Usage",id:"basic-usage",children:[]}],l={toc:o};function c({components:e,...n}){return Object(s.b)("wrapper",Object(t.a)({},l,n,{components:e,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Laravel-permission (",Object(s.b)("a",Object(t.a)({parentName:"p"},{href:"https://spatie.be/docs/laravel-permission/v3/introduction"}),"https://spatie.be/docs/laravel-permission/v3/introduction"),") by Spatie allows you to manage user permissions and roles in a database."),Object(s.b)("h2",{id:"installation"},"Installation"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{})," composer require spatie/laravel-permission\n")),Object(s.b)("p",null,"Clear your config cache"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{})," php artisan config:clear\n")),Object(s.b)("h2",{id:"setting-it-up"},"Setting it up"),Object(s.b)("h3",{id:"publish-the-migrations"},"Publish the migrations"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{}),'php artisan vendor:publish --provider="Spatie\\Permission\\PermissionServiceProvider" --tag="migrations"\n')),Object(s.b)("h3",{id:"create-database-tables"},"Create database tables"),Object(s.b)("p",null,"Create the tables for this package by running:"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{}),"php artisan migrate\n")),Object(s.b)("h3",{id:"updating-user-model"},"Updating User Model"),Object(s.b)("p",null," First, add the Spatie\\Permission\\Traits\\HasRoles trait to your User model(s):"),Object(s.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(s.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(s.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(s.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"Dont overwrite other traits, just make sure you are adding to the existing model."))),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),"use Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Spatie\\Permission\\Traits\\HasRoles;\n\nclass User extends Authenticatable\n{\n    use HasRoles;\n\n    // ...\n}\n")),Object(s.b)("h3",{id:"updating-the-middleware"},"Updating the middleware"),Object(s.b)("p",null," Spatie package provide it's in-built middleware which can be added in Kernel.php file this way :"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"app/Http/Kernel.php")),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),"....\nprotected $routeMiddleware = [\n    ....\n    'role' => \\Spatie\\Permission\\Middlewares\\RoleMiddleware::class,\n    'permission' => \\Spatie\\Permission\\Middlewares\\PermissionMiddleware::class,\n]\n....\n")),Object(s.b)("h3",{id:"create-permissions-and-roles"},"Create Permissions and Roles"),Object(s.b)("p",null,"Now is the time to decide what kind of permissions and roles our application will have. "),Object(s.b)("h4",{id:"create-artisan-command"},"Create artisan command"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),"php artisan make:command CreateRolesPermissions\n")),Object(s.b)("p",null,"Add the following code to ",Object(s.b)("inlineCode",{parentName:"p"},"app/Console/Commands/CreateRolesPermissions.php")),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),'<?php\n\nnamespace App\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\nuse Spatie\\Permission\\Models\\Role;\nuse Spatie\\Permission\\Models\\Permission;\n\nclass CreateRolesPermissions extends Command\n{\n   /**\n    * The name and signature of the console command.\n    *\n    * @var string\n    */\n   protected $signature = \'laravel_api:bootstrap\';\n\n   /**\n    * The console command description.\n    *\n    * @var string\n    */\n   protected $description = \'Create roles and permissions\';\n\n   /**\n    * Create a new command instance.\n    *\n    * @return void\n    */\n   public function __construct()\n   {\n       parent::__construct();\n   }\n\n   /**\n    * Execute the console command.\n    *\n    * @return mixed\n    */\npublic function handle()\n   {\n\n       $roles = ["Super Admin", "User Manager","Role Manager"];\n\n       $permissions = [\n           "View All Users", \n           "Edit All Users", \n           "Assign Role", \n           "Unassign Role", \n           "View All Permissions",\n           "View All Roles"];\n\n\n       $this->line(\'------------- Setting Up Roles:\');\n\n       foreach ($roles as $role) {\n           $role = Role::updateOrCreate([\'name\' => $role, \'guard_name\' => \'api\']);\n           $this->info("Created " . $role->name . " Role");\n       }\n\n       $this->line(\'------------- Setting Up Permissions:\');\n\n       $superAdminRole = Role::where(\'name\', "Super Admin")->first();\n\n       foreach ($permissions as $perm_name) {\n           $permission = Permission::updateOrCreate([\'name\' => $perm_name,\n               \'guard_name\' => \'api\']);\n\n           $superAdminRole->givePermissionTo($permission);\n\n           $this->info("Created " . $permission->name . " Permission");\n       }\n\n       $this->info("All permissions are granted to Super Admin");\n       $this->line(\'------------- Application Bootstrapping is Complete: \\n\');\n   }\n}\n')),Object(s.b)("h4",{id:"run-the-artisan-command"},"Run the Artisan command"),Object(s.b)("p",null,"Run ",Object(s.b)("inlineCode",{parentName:"p"},"rolespermissions:create")," to generate roles and permissions and persist them into the database."),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),"php artisan rolespermissions:create\n")),Object(s.b)("h3",{id:"laravel-permissions-in-vue-components"},"Laravel Permissions in Vue Components"),Object(s.b)("h4",{id:"add-accessor-to-user-model-that-returns-permissions"},"Add accessor to User model that returns permissions"),Object(s.b)("p",null," Add an accessor to your User model that returns an array of permission names that the user has."),Object(s.b)("p",null,"In app\\Models\\User.php:"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),"\nuse Spatie\\Permission\\Models\\Permission;\nuse Illuminate\\Support\\Facades\\Auth;\n\npublic function getAllPermissionsAttribute() {\n  $permissions = [];\n    foreach (Permission::all() as $permission) {\n      if (Auth::user()->can($permission->name)) {\n        $permissions[] = $permission->name;\n      }\n    }\n    return $permissions;\n}\n")),Object(s.b)("h4",{id:"add-a-global-javascript-array-of-the-users-permissions"},"Add a global javascript array of the user\u2019s permissions"),Object(s.b)("p",null,"In a file that is rendered on every page, such as ",Object(s.b)("inlineCode",{parentName:"p"},"resources/views/spa.blade.php"),", globally define the permissions as a JavaScript array."),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-javascript"}),"<script>\n @auth\n   window.Permissions = {!! json_encode(Auth::user()->allPermissions, true) !!};\n @else\n   window.Permissions = [];\n @endauth\n<\/script>\n")),Object(s.b)("h4",{id:"create-a-global-mixins-file-with-a-method-to-check-if-a-user-has-a-permission"},"Create a global mixins file with a method to check if a user has a permission"),Object(s.b)("p",null,"Mixins are a great way to share functionality across components. In this case, we\u2019ll share a method named $can globally, across all components. It accesses the Permissions array that we set in the layout file."),Object(s.b)("p",null,"Create a ",Object(s.b)("inlineCode",{parentName:"p"},"resources/js/mixins/Permissions.vue")," file. Laravel does not ship with a mixins directory by default, so create the directory if you need to."),Object(s.b)("p",null,"The new file should contain:"),Object(s.b)("h4",{id:"import-the-mixin-globally"},"Import the mixin globally"),Object(s.b)("p",null,"Modify ",Object(s.b)("inlineCode",{parentName:"p"},"resources/js/app.js")," to import the mixin"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),"import Permissions from './mixins/Permissions';\nVue.mixin(Permissions);\n")),Object(s.b)("h4",{id:"rebuild-assets"},"Rebuild assets"),Object(s.b)("p",null,"If you\u2019re not watching your assets for changes."),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{}),"npm run dev\n")),Object(s.b)("h4",{id:"check-permissions-in-vue-components-as-needed"},"Check permissions in Vue components as needed"),Object(s.b)("p",null,"You can now use $can in v-if conditions in templates used by Vue components."),Object(s.b)("p",null,"For example, this would only show \u201cYou can edit posts.\u201d if a user had the \u201cedit posts\u201d permission:"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{}),"<div v-if=\"$can('edit posts')\">You can edit posts.</div>\n")),Object(s.b)("p",null,"You can also access $can in the methods of Vue components."),Object(s.b)("p",null,"Remember not to rely on the front-end alone, and always check permissions on the backend as well."),Object(s.b)("h3",{id:"additional-comments"},"Additional comments"),Object(s.b)("h4",{id:"change-guard_name-of-user-model"},"Change guard_name of user model"),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(t.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(t.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(t.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(s.b)("div",Object(t.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"Seems like the default configuration of spatie uses api guards. Need to look more into this to fully understand what this change"))),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),"//Added this to make guard used by spatie be api instead of web.\n    protected $guard_name = 'api';\n")),Object(s.b)("h2",{id:"basic-usage"},"Basic Usage"),Object(s.b)("p",null," Eventually, this functionality will be added to a user interface. In the mean time, you can test it with Laravel Tinker (",Object(s.b)("a",Object(t.a)({parentName:"p"},{href:"https://laravel.com/docs/8.x/artisan#tinker"}),"https://laravel.com/docs/8.x/artisan#tinker"),"). This is an REPL, or an interactive shell that you can run commands and interact with your application."),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),"php artisan tinker\nPsy Shell v0.10.5 (PHP 7.4.11 \u2014 cli) by Justin Hileman\n>>>\n")),Object(s.b)("p",null,"You can do queries for a model "),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),"User::find(1)\n")),Object(s.b)("p",null,"Return the User with an id of 1"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),'\n[!] Aliasing \'User\' to \'App\\Models\\User\' for this Tinker session.\n=> App\\Models\\User {#4211\n     id: 1,\n     name: "Gabe",\n     email: "gabefernandez@ufl.edu",\n     email_verified_at: null,\n     created_at: "2021-01-27 06:41:10",\n     updated_at: "2021-01-27 06:41:10",\n')),Object(s.b)("p",null,"For using laravel-permitions, you can use built-in commands"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{}),"User::find(1)->getRoleNames()\n")),Object(s.b)("p",null,"Returns a json with all roles for that user"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),'=> Illuminate\\Support\\Collection {#4373\n     all: [\n       "Super Admin",\n     ],\n   }\n')),Object(s.b)("p",null,"Assigning a role to a user"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),'User::find(1)->assignRole("Super Admin")\n')),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{}),'=> App\\Models\\User {#4211\n     id: 1,\n     name: "Gabe",\n     email: "gabefernandez@ufl.edu",\n     email_verified_at: null,\n     created_at: "2021-01-27 06:41:10",\n     updated_at: "2021-01-27 06:41:10",\n     roles: Illuminate\\Database\\Eloquent\\Collection {#4366\n       all: [\n         Spatie\\Permission\\Models\\Role {#4359\n           id: 1,\n           name: "Super Admin",\n           guard_name: "api",\n           created_at: "2021-01-27 07:24:03",\n           updated_at: "2021-01-27 07:24:03",\n           pivot: Illuminate\\Database\\Eloquent\\Relations\\MorphPivot {#4365\n             model_id: 1,\n             role_id: 1,\n             model_type: "App\\Models\\User",\n           },\n         },\n       ],\n     },\n   }\n')),Object(s.b)("p",null,"   Displaying permissions (inherited and direct)"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),' User::find(1)->getAllPermissions()\n    ```\n    \n    Removing a role\n    \n    ```php\n    User::find(1)->removeRole("Super Admin")\n    ```\n    \n    ```php \n    => App\\Models\\User {#4211\n  id: 1,\n  name: "Gabe",\n  email: "gabefernandez@ufl.edu",\n  email_verified_at: null,\n  created_at: "2021-01-27 06:41:10",\n  updated_at: "2021-01-27 06:41:10",\n  roles: Illuminate\\Database\\Eloquent\\Collection {#265\n    all: [],\n  },\n}\n')),Object(s.b)("p",null," For a full list of methonds, check the Spatie documentation:\n",Object(s.b)("a",Object(t.a)({parentName:"p"},{href:"https://spatie.be/docs/laravel-permission/v3/basic-usage/basic-usage"}),"https://spatie.be/docs/laravel-permission/v3/basic-usage/basic-usage"),"\n",Object(s.b)("a",Object(t.a)({parentName:"p"},{href:"https://spatie.be/docs/laravel-permission/v3/basic-usage/role-permissions"}),"https://spatie.be/docs/laravel-permission/v3/basic-usage/role-permissions")),Object(s.b)("p",null,"References:\n",Object(s.b)("a",Object(t.a)({parentName:"p"},{href:"https://mmccaff.github.io/2018/11/03/laravel-permissions-in-vue-components/"}),"https://mmccaff.github.io/2018/11/03/laravel-permissions-in-vue-components/")))}c.isMDXComponent=!0}}]);